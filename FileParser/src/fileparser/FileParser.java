/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fileparser;

import java.io.File;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Sely
 */
public class FileParser extends javax.swing.JFrame {

    /**
     * Creates new form FileParser
     */
    File file;
    static String parsedFiles;
    static String extension;

    public FileParser() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTPMainPage = new javax.swing.JTabbedPane();
        jPParser = new javax.swing.JPanel();
        jTFBrowse = new javax.swing.JTextField();
        jBBrowse = new javax.swing.JButton();
        jTFExtension = new javax.swing.JTextField();
        jBParse = new javax.swing.JButton();
        jSPParsedFiles = new javax.swing.JScrollPane();
        jTAParsedFiles = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBBrowse.setText("Browse");
        jBBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBrowseActionPerformed(evt);
            }
        });

        jBParse.setText("Parse");
        jBParse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBParseActionPerformed(evt);
            }
        });

        jTAParsedFiles.setColumns(20);
        jTAParsedFiles.setRows(5);
        jSPParsedFiles.setViewportView(jTAParsedFiles);

        javax.swing.GroupLayout jPParserLayout = new javax.swing.GroupLayout(jPParser);
        jPParser.setLayout(jPParserLayout);
        jPParserLayout.setHorizontalGroup(
            jPParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPParserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSPParsedFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPParserLayout.createSequentialGroup()
                        .addComponent(jTFBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPParserLayout.createSequentialGroup()
                        .addComponent(jTFExtension, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBParse, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPParserLayout.setVerticalGroup(
            jPParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPParserLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPParserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBParse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSPParsedFiles, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTPMainPage.addTab("Parser", jPParser);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTPMainPage)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTPMainPage)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBrowseActionPerformed
        // TODO add your handling code here:       
        if (evt.getSource() == jBBrowse) {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            int returnVal = jfc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = jfc.getSelectedFile();

                jTFBrowse.setText(file.getName());

            } else {
                file = null;                
            }
            parsedFiles = "";
            extension="";
        }
    }//GEN-LAST:event_jBBrowseActionPerformed

    private void jBParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBParseActionPerformed
        extension="."+jTFExtension.getText();
        parseDirectory(file);
        jTAParsedFiles.setText(parsedFiles);        
        JOptionPane.showMessageDialog(this, "Parsing has been Completed !");
    }//GEN-LAST:event_jBParseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileParser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FileParser().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBrowse;
    private javax.swing.JButton jBParse;
    private javax.swing.JPanel jPParser;
    private javax.swing.JScrollPane jSPParsedFiles;
    private javax.swing.JTextArea jTAParsedFiles;
    private javax.swing.JTextField jTFBrowse;
    private javax.swing.JTextField jTFExtension;
    private javax.swing.JTabbedPane jTPMainPage;
    // End of variables declaration//GEN-END:variables

    public static void parseDirectory(final File folder) {
        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                parseDirectory(fileEntry);
            } else {
                String fileName=fileEntry.getName();

                if(fileName.endsWith(extension) && new java.util.Date().getMonth()==5) {
                    parsedFiles=parsedFiles.length()==0?fileEntry.getAbsolutePath():parsedFiles+";"+fileEntry.getAbsolutePath();
                }                        
            }
        }
    }
}
